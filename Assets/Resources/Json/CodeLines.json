{
  "Bubble": {
    "Line1": "<color=blue>public static void</color> Sort( <color=blue>int</color>[] <color=#00ffffff>arr</color> )",
    "Line2": "{",
    "Line3": "\t<color=blue>var</color> n = <color=#00ffffff>arr</color>.Length;",
    "For": "\t<color=blue>for</color> ( <color=blue>var</color> i = 0; i < n - 1; i++ )",
    "Line5": "\t{",
    "For2": "\t\t<color=blue>for</color> ( <color=blue>var</color> j = 0; j < n - i - 1; j++ )",
    "Line7": "\t\t{",
    "Selected": "\t\t\t<color=blue>if</color> ( <color=#00ffffff>arr</color>[j] > <color=#00ffffff>arr</color>[j + 1] )",
    "Line9": "\t\t\t{",
    "Swap": "\t\t\t\t( <color=#00ffffff>arr</color>[j], <color=#00ffffff>arr</color>[j + 1] ) = ( <color=#00ffffff>arr</color>[j + 1], <color=#00ffffff>arr</color>[j] );",
    "Line11": "\t\t\t}",
    "Line12": "\t\t}",
    "Line13": "\t}",
    "Line14": "}"
  },
  "Cocktail": {
    "Line1": "<color=blue>public</color> <color=blue>static</color> <color=blue>void</color> Sort( <color=blue>int</color>[] <color=#00ffffff>arr</color> )",
    "Line2": "{",
    "Line3": "\t<color=blue>var</color> swapped = <color=blue>true</color>;",
    "Line4": "\t<color=blue>var</color> start   = <color=red>0</color>;",
    "Line5": "\t<color=blue>var</color> end     = <color=#00ffffff>arr</color>.Length;",
    "Line6": "",
    "While": "\t<color=blue>while</color> ( swapped )",
    "Line8": "\t{",
    "Line9": "\t\tswapped = <color=blue>false</color>;",
    "For": "\t\t<color=blue>for</color> ( <color=blue>var</color> i = start; i < end - <color=red>1</color>; ++i )",
    "Line11": "\t\t{",
    "Selected": "\t\t\t<color=blue>if</color> ( <color=#00ffffff>arr</color>[i] > <color=#00ffffff>arr</color>[i + <color=red>1</color>] )",
    "Line13": "\t\t\t{",
    "Swap": "\t\t\t\t( <color=#00ffffff>arr</color>[i], <color=#00ffffff>arr</color>[i + <color=red>1</color>] ) = ( <color=#00ffffff>arr</color>[i + <color=red>1</color>], <color=#00ffffff>arr</color>[i] );",
    "Line15": "\t\t\t\tswapped = <color=blue>true</color>;",
    "Line16": "\t\t\t}",
    "Line17": "\t\t}",
    "Line18": "",
    "Line19": "\t\t<color=blue>if</color> ( swapped == <color=blue>false</color> )",
    "Line20": "\t\t\t<color=blue>break</color>;",
    "Line21": "",
    "Line22": "\t\tswapped = <color=blue>false</color>;",
    "Line23": "\t\tend -= <color=red>1</color>;",
    "Line24": "",
    "For2": "\t\t<color=blue>for</color> ( <color=blue>var</color> i = end - <color=red>1</color>; i >= start; i-- )",
    "Line26": "\t\t{",
    "Selected2": "\t\t\t<color=blue>if</color> ( <color=#00ffffff>arr</color>[i] > <color=#00ffffff>arr</color>[i + <color=red>1</color>] )",
    "Line28": "\t\t\t{",
    "Swap2": "\t\t\t\t( <color=#00ffffff>arr</color>[i], <color=#00ffffff>arr</color>[i + <color=red>1</color>] ) = ( <color=#00ffffff>arr</color>[i + <color=red>1</color>], <color=#00ffffff>arr</color>[i] );",
    "Line30": "\t\t\t\tswapped = <color=blue>true</color>;",
    "Line31": "\t\t\t}",
    "Line32": "\t\t}",
    "Line33": "\t\tstart += <color=red>1</color>;",
    "Line34": "\t}",
    "Line35": "}"
  },
  "Comb": {
    "Line1": "<color=blue>static</color> <color=blue>int</color> GetNextGap( <color=blue>int</color> gap )",
    "Line2": "{",
    "Line3": "\tgap = ( gap * <color=red>10</color> ) / <color=red>13</color>;",
    "Line4": "\t<color=blue>if</color> ( gap < <color=red>1</color> )",
    "Line5": "\t{",
    "Line6": "\t\t<color=blue>return</color> <color=red>1</color>;",
    "Line7": "\t}",
    "Line8": "",
    "Line9": "\t<color=blue>return</color> gap;",
    "Line10": "}",
    "Line11": "",
    "Line12": "<color=blue>public</color> <color=blue>static</color> <color=blue>void</color> Sort( <color=blue>int</color>[] <color=#00ffffff>arr</color> )",
    "Line13": "{",
    "Line14": "\t<color=blue>var</color> length = <color=#00ffffff>arr</color>.Length;",
    "Line15": "\t<color=blue>var</color> gap    = length;",
    "Line16": "",
    "Line17": "\t<color=blue>var</color> swapped = <color=blue>true</color>;",
    "Line18": "",
    "While": "\t<color=blue>while</color> ( gap != <color=red>1</color> || swapped )",
    "Line20": "\t{",
    "Line21": "\t\tgap = GetNextGap( gap );",
    "Line22": "\t\tswapped = <color=blue>false</color>;",
    "Line23": "",
    "For": "\t\t<color=blue>for</color> ( <color=blue>var</color> i = <color=red>0</color>; i < length - gap; i++ )",
    "Line25": "\t\t{",
    "Selected": "\t\t\t<color=blue>if</color> ( <color=#00ffffff>arr</color>[i] > <color=#00ffffff>arr</color>[i + gap] )",
    "Line27": "\t\t\t{",
    "Swap": "\t\t\t\t( <color=#00ffffff>arr</color>[i], <color=#00ffffff>arr</color>[i + gap] ) = ( <color=#00ffffff>arr</color>[i + gap], <color=#00ffffff>arr</color>[i] );",
    "Line29": "\t\t\t\tswapped = <color=blue>true</color>;",
    "Line30": "\t\t\t}",
    "Line31": "\t\t}",
    "Line32": "\t}",
    "Line33": "}"
  },
  "Gnome": {
    "Line1": "<color=blue>public</color> <color=blue>static</color> <color=blue>void</color> GnomeSort( <color=blue>int</color>[] <color=#00ffffff>arr</color>, <color=blue>int</color> length )",
    "Line2": "{",
    "Line3": "\t<color=blue>var</color> index = <color=red>0</color>;",
    "While": "\t<color=blue>while</color> ( index < length )",
    "Line5": "\t{",
    "Line6": "\t\t<color=blue>if</color> ( index == <color=red>0</color> )",
    "Line7": "\t\t{",
    "Line8": "\t\t\tindex++;",
    "Line9": "\t\t}",
    "Line10": "",
    "Selected": "\t\t<color=blue>if</color> ( <color=#00ffffff>arr</color>[index] >= <color=#00ffffff>arr</color>[index - <color=red>1</color>] )",
    "Line12": "\t\t{",
    "Line13": "\t\t\tindex++;",
    "Line14": "\t\t}",
    "Line15": "\t\t<color=blue>else</color>",
    "Line16": "\t\t{",
    "Swap": "\t\t\t( <color=#00ffffff>arr</color>[index], <color=#00ffffff>arr</color>[index - <color=red>1</color>] ) = ( <color=#00ffffff>arr</color>[index - <color=red>1</color>], <color=#00ffffff>arr</color>[index] );",
    "Line18": "\t\t\tindex--;",
    "Line19": "\t\t}",
    "Line20": "\t}",
    "Line21": "}"
  },
  "Heap": {
    "Line1": "<color=blue>public</color> <color=blue>static</color> <color=blue>void</color> Sort( <color=blue>int</color>[] <color=#00ffffff>arr</color> )",
    "Line2": "{",
    "Line3": "\t<color=blue>var</color> n = <color=#00ffffff>arr</color>.Length;",
    "For": "\t<color=blue>for</color> ( <color=blue>var</color> i = n / <color=red>2</color>; i >= <color=red>0</color>; i-- )",
    "Line5": "\t{",
    "Line6": "\t\tHeapify( <color=#00ffffff>arr</color>, n - <color=red>1</color>, i );",
    "Line7": "\t}",
    "For2": "\t<color=blue>for</color> ( <color=blue>var</color> i = n - <color=red>1</color>; i > <color=red>0</color>; i-- )",
    "Line9": "\t{",
    "Swap": "\t\t( <color=#00ffffff>arr</color>[i], <color=#00ffffff>arr</color>[<color=red>0</color>] ) = ( <color=#00ffffff>arr</color>[<color=red>0</color>], <color=#00ffffff>arr</color>[i] );",
    "Line11": "\t\tHeapify( <color=#00ffffff>arr</color>, i - <color=red>1</color>, <color=red>0</color> );",
    "Line12": "\t}",
    "Line13": "}",
    "Line14": "",
    "Line15": "<color=blue>static</color> <color=blue>void</color> Heapify( <color=blue>int</color>[] <color=#00ffffff>arr</color>, <color=blue>int</color> n, <color=blue>int</color> i )",
    "Line16": "{",
    "Line17": "\t<color=blue>var</color> max   = i;",
    "Line18": "\t<color=blue>var</color> left  = <color=red>2</color> * i + <color=red>1</color>;",
    "Line19": "\t<color=blue>var</color> right = <color=red>2</color> * i + <color=red>2</color>;",
    "Line20": "",
    "IF": "\t<color=blue>if</color> ( left <= n && <color=#00ffffff>arr</color>[left] > <color=#00ffffff>arr</color>[max] ) {",
    "Line22": "\t\tmax = left;",
    "Line23": "\t}",
    "IF2": "\t<color=blue>if</color> ( right <= n && <color=#00ffffff>arr</color>[right] > <color=#00ffffff>arr</color>[max] ) {",
    "Line25": "\t\tmax = right;",
    "Line26": "\t}",
    "Line27": "\t<color=blue>if</color> ( max != i ) {",
    "Swap2": "\t\t( <color=#00ffffff>arr</color>[i], <color=#00ffffff>arr</color>[max] ) = ( <color=#00ffffff>arr</color>[max], <color=#00ffffff>arr</color>[i] );",
    "Line29": "\t\tHeapify( <color=#00ffffff>arr</color>, n, max );",
    "Line30": "\t}",
    "Line31": "}"
  },
  "Insertion": {
    "Line1": "<color=blue>public</color> <color=blue>static</color> <color=blue>void</color> Sort( <color=blue>int</color>[] <color=#00ffffff>arr</color> )",
    "Line2": "{",
    "For": "\t<color=blue>for</color> ( <color=blue>var</color> i = <color=red>0</color>; i < <color=#00ffffff>arr</color>.Length - <color=red>1</color>; i++ )",
    "Line4": "\t{",
    "For2": "\t\t<color=blue>for</color> ( <color=blue>var</color> j = i + <color=red>1</color>; j > <color=red>0</color>; j-- )",
    "Line6": "\t\t{",
    "Compare": "\t\t\t<color=blue>if</color> ( <color=#00ffffff>arr</color>[j - <color=red>1</color>] > <color=#00ffffff>arr</color>[j] )",
    "Line8": "\t\t\t{",
    "Swap": "\t\t\t\t( <color=#00ffffff>arr</color>[j - <color=red>1</color>], <color=#00ffffff>arr</color>[j] ) = ( <color=#00ffffff>arr</color>[j], <color=#00ffffff>arr</color>[j - <color=red>1</color>] );",
    "Line10": "\t\t\t}",
    "Line11": "\t\t}",
    "Line12": "\t}",
    "Line13": "}"
  },
  "MergeBottomUp": {
    "Line1": "<color=blue>public</color> <color=blue>static</color> <color=blue>void</color> Sort( <color=blue>int</color>[] <color=#00ffffff>arr</color> )",
    "Line2": "{",
    "Line3": "\t<color=blue>var</color> orderedArr = new <color=blue>int</color>[<color=#00ffffff>arr</color>.Length];",
    "For": "\t<color=blue>for</color> ( <color=blue>var</color> i = <color=red>2</color>; i < <color=#00ffffff>arr</color>.Length * <color=red>2</color>; i *= <color=red>2</color> )",
    "Line5": "\t{",
    "For2": "\t\t<color=blue>for</color> ( <color=blue>var</color> j = <color=red>0</color>; j < ( <color=#00ffffff>arr</color>.Length + i - <color=red>1</color> ) / i; j++ )",
    "Line7": "\t\t{",
    "Line8": "\t\t\t<color=blue>var</color> LEFT               = i * j;",
    "Line9": "\t\t\t<color=blue>var</color> MIDDLE             = LEFT + i / <color=red>2</color> >= <color=#00ffffff>arr</color>.Length ? ( <color=#00ffffff>arr</color>.Length - <color=red>1</color> ) : ( LEFT + i / <color=red>2</color> );",
    "Line10": "\t\t\t<color=blue>var</color> RIGHT              = i * ( j + <color=red>1</color> ) - <color=red>1</color> >= <color=#00ffffff>arr</color>.Length ? ( <color=#00ffffff>arr</color>.Length - <color=red>1</color> ) : ( i * ( j + <color=red>1</color> ) - <color=red>1</color> );",
    "Line11": "\t\t\t<color=blue>int</color> nextAuxiliaryIndex = LEFT, left = LEFT, mid = MIDDLE;",
    "While": "\t\t\t<color=blue>while</color> ( left < MIDDLE && mid <= RIGHT )",
    "Line13": "\t\t\t{",
    "Line14": "\t\t\t\t<color=blue>if</color> ( <color=#00ffffff>arr</color>[left] < <color=#00ffffff>arr</color>[mid] )",
    "Line15": "\t\t\t\t{",
    "Pick": "\t\t\t\t\torderedArr[nextAuxiliaryIndex++] = <color=#00ffffff>arr</color>[left++];",
    "Line17": "\t\t\t\t}",
    "Line18": "\t\t\t\t<color=blue>else</color>",
    "Line19": "\t\t\t\t{",
    "Pick2": "\t\t\t\t\torderedArr[nextAuxiliaryIndex++] = <color=#00ffffff>arr</color>[mid++];",
    "Line21": "\t\t\t\t}",
    "Line22": "\t\t\t}",
    "Line23": "",
    "Line24": "\t\t\t<color=blue>while</color> ( left < MIDDLE )",
    "Pick3": "\t\t\t\torderedArr[nextAuxiliaryIndex++] = <color=#00ffffff>arr</color>[left++];",
    "Line26": "\t\t\t<color=blue>while</color> ( mid <= RIGHT )",
    "Pick4": "\t\t\t\torderedArr[nextAuxiliaryIndex++] = <color=#00ffffff>arr</color>[mid++];",
    "Line28": "",
    "Copy": "\t\t\tArray.Copy( orderedArr, LEFT, <color=#00ffffff>arr</color>, LEFT, RIGHT - LEFT + <color=red>1</color> );",
    "Line30": "\t\t}",
    "Line31": "\t}",
    "Line32": "}"
  },
  "OddEven": {
    "Line1": "<color=blue>public</color> <color=blue>static</color> <color=blue>void</color> Sort( <color=blue>int</color>[] <color=#00ffffff>arr</color> )",
    "Line2": "{",
    "Line3": "\t<color=blue>var</color> sorted = <color=blue>false</color>;",
    "While": "\t<color=blue>while</color> ( !sorted )",
    "Line5": "\t{",
    "Line6": "\t\tsorted = <color=blue>true</color>;",
    "For": "\t\t<color=blue>for</color> ( <color=blue>var</color> i = <color=red>1</color>; i < <color=#00ffffff>arr</color>.Length - <color=red>1</color>; i += <color=red>2</color> )",
    "Line8": "\t\t{",
    "Selected": "\t\t\t<color=blue>if</color> ( <color=#00ffffff>arr</color>[i] > <color=#00ffffff>arr</color>[i + <color=red>1</color>] )",
    "Line10": "\t\t\t{",
    "Swap": "\t\t\t\t( <color=#00ffffff>arr</color>[i], <color=#00ffffff>arr</color>[i + <color=red>1</color>] ) = ( <color=#00ffffff>arr</color>[i + <color=red>1</color>], <color=#00ffffff>arr</color>[i] );",
    "Line12": "\t\t\t\tsorted = <color=blue>false</color>;",
    "Line13": "\t\t\t}",
    "Line14": "\t\t}",
    "Line15": "",
    "For2": "\t\t<color=blue>for</color> ( <color=blue>var</color> i = <color=red>0</color>; i < <color=#00ffffff>arr</color>.Length - <color=red>1</color>; i += <color=red>2</color> )",
    "Line17": "\t\t{",
    "Selected2": "\t\t\t<color=blue>if</color> ( <color=#00ffffff>arr</color>[i] > <color=#00ffffff>arr</color>[i + <color=red>1</color>] )",
    "Line19": "\t\t\t{",
    "Swap2": "\t\t\t\t( <color=#00ffffff>arr</color>[i], <color=#00ffffff>arr</color>[i + <color=red>1</color>] ) = ( <color=#00ffffff>arr</color>[i + <color=red>1</color>], <color=#00ffffff>arr</color>[i] );",
    "Line21": "\t\t\t\tsorted = <color=blue>false</color>;",
    "Line22": "\t\t\t}",
    "Line23": "\t\t}",
    "Line24": "\t}",
    "Line25": "}"
  },
  "Quick": {
    "Line1": "<color=blue>public</color> <color=blue>static</color> <color=blue>void</color> QuickSort( <color=blue>int</color>[] <color=#00ffffff>arr</color>, <color=blue>int</color> left, <color=blue>int</color> right )",
    "Line2": "{",
    "Line3": "\t<color=blue>if</color> ( left >= right ) <color=blue>return</color>;",
    "Line4": "",
    "Line5": "\t<color=blue>var</color> middleValue = <color=#00ffffff>arr</color>[( left + right ) / <color=red>2</color>];",
    "Line6": "\t<color=blue>var</color> cursorLeft  = left - <color=red>1</color>;",
    "Line7": "\t<color=blue>var</color> cursorRight = right + <color=red>1</color>;",
    "While": "\t<color=blue>while</color> ( <color=blue>true</color> )",
    "Line9": "\t{",
    "Selected": "\t\t<color=blue>while</color> ( <color=#00ffffff>arr</color>[++cursorLeft] < middleValue ) ;",
    "Line11": "",
    "Selected2": "\t\t<color=blue>while</color> ( <color=#00ffffff>arr</color>[--cursorRight] > middleValue ) ;",
    "Line13": "",
    "IF": "\t\t<color=blue>if</color> ( cursorLeft >= cursorRight )",
    "Selected3": "\t\t\t<color=blue>break</color>;",
    "Line16": "",
    "Swap": "\t\t( <color=#00ffffff>arr</color>[cursorLeft], <color=#00ffffff>arr</color>[cursorRight] ) = ( <color=#00ffffff>arr</color>[cursorRight], <color=#00ffffff>arr</color>[cursorLeft] );",
    "Line18": "\t}",
    "Line19": "",
    "Line20": "\tQuickSort( <color=#00ffffff>arr</color>, left, cursorLeft - <color=red>1</color> );",
    "Line21": "\tQuickSort( <color=#00ffffff>arr</color>, cursorRight + <color=red>1</color>, right );",
    "Line22": "}"
  },
  "Radix": {
    "Line1": "<color=blue>public</color> <color=blue>static</color> <color=blue>void</color> Sort( <color=blue>int</color>[] <color=#00ffffff>arr</color> )",
    "Line2": "{",
    "Line3": "\t<color=blue>var</color> n   = <color=#00ffffff>arr</color>.Length;",
    "Line4": "\t<color=blue>var</color> max = <color=#00ffffff>arr</color>[<color=red>0</color>];",
    "Line5": "",
    "For": "\t<color=blue>for</color> ( <color=blue>var</color> i = <color=red>1</color>; i < n; i++ )",
    "Line7": "\t{",
    "Line8": "\t\t<color=blue>if</color> ( max < <color=#00ffffff>arr</color>[i] )",
    "Line9": "\t\t\tmax = <color=#00ffffff>arr</color>[i];",
    "Line10": "\t}",
    "Line11": "",
    "For2": "\t<color=blue>for</color> ( <color=blue>var</color> place = <color=red>1</color>; max / place > <color=red>0</color>; place *= <color=red>10</color> )",
    "Line13": "\t\tCountingSort( <color=#00ffffff>arr</color>, place );",
    "Line14": "}",
    "Line15": "",
    "Line16": "<color=blue>static</color> <color=blue>void</color> CountingSort( <color=blue>int</color>[] <color=#00ffffff>arr</color>, <color=blue>int</color> place )",
    "Line17": "{",
    "Line18": "\t<color=blue>var</color> n      = <color=#00ffffff>arr</color>.Length;",
    "Line19": "\t<color=blue>var</color> output = new <color=blue>int</color>[n];",
    "Line20": "",
    "Line21": "\t<color=blue>int</color>[] freq = {<color=red>0</color>, <color=red>0</color>, <color=red>0</color>, <color=red>0</color>, <color=red>0</color>, <color=red>0</color>, <color=red>0</color>, <color=red>0</color>, <color=red>0</color>, <color=red>0</color>};",
    "For3": "\t<color=blue>for</color> ( <color=blue>var</color> i = <color=red>0</color>; i < n; i++ )",
    "Line23": "\t\tfreq[( <color=#00ffffff>arr</color>[i] / place ) % <color=red>10</color>]++;",
    "Line24": "",
    "For4": "\t<color=blue>for</color> ( <color=blue>var</color> i = <color=red>1</color>; i < <color=red>10</color>; i++ )",
    "Line26": "\t\tfreq[i] += freq[i - <color=red>1</color>];",
    "Line27": "",
    "For5": "\t<color=blue>for</color> ( <color=blue>var</color> i = n - <color=red>1</color>; i >= <color=red>0</color>; i-- )",
    "Line29": "\t{",
    "RadixPick": "\t\toutput[freq[( <color=#00ffffff>arr</color>[i] / place ) % <color=red>10</color>] - <color=red>1</color>] = <color=#00ffffff>arr</color>[i];",
    "Line31": "\t\tfreq[( <color=#00ffffff>arr</color>[i] / place ) % <color=red>10</color>]--;",
    "Line32": "\t}",
    "Line33": "",
    "Line34": "\t<color=blue>for</color> ( <color=blue>var</color> i = <color=red>0</color>; i < n; i++ )",
    "Copy": "\t\t<color=#00ffffff>arr</color>[i] = output[i];",
    "Line36": "}"
  },
  "Selection": {
    "Line1": "<color=blue>public</color> <color=blue>static</color> <color=blue>void</color> Sort( <color=blue>int</color>[] <color=#00ffffff>arr</color> )",
    "Line2": "{",
    "Line3": "\t<color=blue>var</color> n = <color=#00ffffff>arr</color>.Length;",
    "For": "\t<color=blue>for</color> ( <color=blue>var</color> i = <color=red>0</color>; i < n - <color=red>1</color>; i++ )",
    "Line5": "\t{",
    "Selected": "\t\t<color=blue>var</color> min = i;",
    "For2": "\t\t<color=blue>for</color> ( <color=blue>var</color> j = i + <color=red>1</color>; j < n; j++ )",
    "Line8": "\t\t{",
    "Selected2": "\t\t\t<color=blue>if</color> ( <color=#00ffffff>arr</color>[j] < <color=#00ffffff>arr</color>[min] )",
    "Line10": "\t\t\t{",
    "Selected3": "\t\t\t\tmin = j;",
    "Line12": "\t\t\t}",
    "Line13": "\t\t}",
    "Swap": "\t\t( <color=#00ffffff>arr</color>[min], <color=#00ffffff>arr</color>[i] ) = ( <color=#00ffffff>arr</color>[i], <color=#00ffffff>arr</color>[min] );",
    "Line15": "\t}",
    "Line16": "}"
  }
}